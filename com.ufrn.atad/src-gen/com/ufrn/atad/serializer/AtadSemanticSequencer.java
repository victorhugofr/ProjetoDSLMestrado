/*
 * generated by Xtext 2.25.0
 */
package com.ufrn.atad.serializer;

import com.google.inject.Inject;
import com.ufrn.atad.atad.AtadPackage;
import com.ufrn.atad.atad.DeclaraComando;
import com.ufrn.atad.services.AtadGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class AtadSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AtadGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AtadPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AtadPackage.DECLARA_COMANDO:
				sequence_DeclaraComando(context, (DeclaraComando) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DeclaraComando returns DeclaraComando
	 *
	 * Constraint:
	 *     (
	 *         (comandos+=Quando* acoes+=AdicaoComando+ verificacao+=ComandosValidadores+) | 
	 *         (comandos+=Quando* verificacao+=ComandosValidadores+) | 
	 *         verificacao+=ComandosValidadores+
	 *     )?
	 */
	protected void sequence_DeclaraComando(ISerializationContext context, DeclaraComando semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
