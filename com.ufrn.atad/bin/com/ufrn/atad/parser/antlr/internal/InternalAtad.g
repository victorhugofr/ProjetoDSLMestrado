/*
 * generated by Xtext 2.25.0
 */
grammar InternalAtad;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.ufrn.atad.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ufrn.atad.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ufrn.atad.services.AtadGrammarAccess;

}

@parser::members {

 	private AtadGrammarAccess grammarAccess;

    public InternalAtadParser(TokenStream input, AtadGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DeclaraComando";
   	}

   	@Override
   	protected AtadGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDeclaraComando
entryRuleDeclaraComando returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaraComandoRule()); }
	iv_ruleDeclaraComando=ruleDeclaraComando
	{ $current=$iv_ruleDeclaraComando.current; }
	EOF;

// Rule DeclaraComando
ruleDeclaraComando returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaraComandoAccess().getComandosQuandoParserRuleCall_0_0());
				}
				lv_comandos_0_0=ruleQuando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaraComandoRule());
					}
					add(
						$current,
						"comandos",
						lv_comandos_0_0,
						"com.ufrn.atad.Atad.Quando");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaraComandoAccess().getAcoesAdicaoComandoParserRuleCall_1_0());
				}
				lv_acoes_1_0=ruleAdicaoComando
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaraComandoRule());
					}
					add(
						$current,
						"acoes",
						lv_acoes_1_0,
						"com.ufrn.atad.Atad.AdicaoComando");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclaraComandoAccess().getVerificacaoComandosValidadoresParserRuleCall_2_0());
				}
				lv_verificacao_2_0=ruleComandosValidadores
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclaraComandoRule());
					}
					add(
						$current,
						"verificacao",
						lv_verificacao_2_0,
						"com.ufrn.atad.Atad.ComandosValidadores");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleClicar
entryRuleClicar returns [String current=null]:
	{ newCompositeNode(grammarAccess.getClicarRule()); }
	iv_ruleClicar=ruleClicar
	{ $current=$iv_ruleClicar.current.getText(); }
	EOF;

// Rule Clicar
ruleClicar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='clicar'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClicarAccess().getClicarKeyword_0());
		}
		kw='em'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getClicarAccess().getEmKeyword_1());
		}
	)
;

// Entry rule entryRuleNavegar
entryRuleNavegar returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNavegarRule()); }
	iv_ruleNavegar=ruleNavegar
	{ $current=$iv_ruleNavegar.current.getText(); }
	EOF;

// Rule Navegar
ruleNavegar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='navegar'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNavegarAccess().getNavegarKeyword());
	}
;

// Entry rule entryRuleEscrever
entryRuleEscrever returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEscreverRule()); }
	iv_ruleEscrever=ruleEscrever
	{ $current=$iv_ruleEscrever.current.getText(); }
	EOF;

// Rule Escrever
ruleEscrever returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='escrever'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEscreverAccess().getEscreverKeyword());
	}
;

// Entry rule entryRuleComandosAcao
entryRuleComandosAcao returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComandosAcaoRule()); }
	iv_ruleComandosAcao=ruleComandosAcao
	{ $current=$iv_ruleComandosAcao.current.getText(); }
	EOF;

// Rule ComandosAcao
ruleComandosAcao returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComandosAcaoAccess().getClicarParserRuleCall_0());
		}
		this_Clicar_0=ruleClicar
		{
			$current.merge(this_Clicar_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComandosAcaoAccess().getNavegarParserRuleCall_1());
		}
		this_Navegar_1=ruleNavegar
		{
			$current.merge(this_Navegar_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getComandosAcaoAccess().getEscreverParserRuleCall_2());
		}
		this_Escrever_2=ruleEscrever
		{
			$current.merge(this_Escrever_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVerifique
entryRuleVerifique returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVerifiqueRule()); }
	iv_ruleVerifique=ruleVerifique
	{ $current=$iv_ruleVerifique.current.getText(); }
	EOF;

// Rule Verifique
ruleVerifique returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='verifique'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVerifiqueAccess().getVerifiqueKeyword_0());
		}
		kw='que'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVerifiqueAccess().getQueKeyword_1());
		}
	)
;

// Entry rule entryRuleComandosValidadores
entryRuleComandosValidadores returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComandosValidadoresRule()); }
	iv_ruleComandosValidadores=ruleComandosValidadores
	{ $current=$iv_ruleComandosValidadores.current.getText(); }
	EOF;

// Rule ComandosValidadores
ruleComandosValidadores returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getComandosValidadoresAccess().getVerifiqueParserRuleCall());
	}
	this_Verifique_0=ruleVerifique
	{
		$current.merge(this_Verifique_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAdicaoComando
entryRuleAdicaoComando returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdicaoComandoRule()); }
	iv_ruleAdicaoComando=ruleAdicaoComando
	{ $current=$iv_ruleAdicaoComando.current.getText(); }
	EOF;

// Rule AdicaoComando
ruleAdicaoComando returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='E'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAdicaoComandoAccess().getEKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getAdicaoComandoAccess().getComandosAcaoParserRuleCall_1());
		}
		this_ComandosAcao_1=ruleComandosAcao
		{
			$current.merge(this_ComandosAcao_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQuando
entryRuleQuando returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuandoRule()); }
	iv_ruleQuando=ruleQuando
	{ $current=$iv_ruleQuando.current.getText(); }
	EOF;

// Rule Quando
ruleQuando returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Quando'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQuandoAccess().getQuandoKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getQuandoAccess().getComandosAcaoParserRuleCall_1());
		}
		this_ComandosAcao_1=ruleComandosAcao
		{
			$current.merge(this_ComandosAcao_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
