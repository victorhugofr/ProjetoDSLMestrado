/**
 * generated by Xtext 2.25.0
 */
package com.ufrn.atad.generator;

import com.ufrn.atad.atad.Clicar;
import com.ufrn.atad.atad.Escrever;
import com.ufrn.atad.atad.Navegar;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AtadGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    throw new Error("Unresolved compilation problems:"
      + "\nVerifiquePresente cannot be resolved to a type."
      + "\nVerifiqueNaoPresente cannot be resolved to a type."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nUnreachable code: The if condition can never match. It is already handled by a previous condition."
      + "\nThe method comandoVerifique(VerifiquePresente) from the type AtadGenerator refers to the missing type VerifiquePresente"
      + "\nThe method comandoNaoVerifique(VerifiqueNaoPresente) from the type AtadGenerator refers to the missing type VerifiqueNaoPresente");
  }
  
  private CharSequence buildTestPre() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.junit.Test;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.Assertions.assertTrue;");
    _builder.newLine();
    _builder.append("public class Teste{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected WebDriver driver;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void teste() throws InterruptedException{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("driver.manage().window.maximize();");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence buildTestPos() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence comandoClicar(final Clicar c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.findElement(By.");
    String _tipoLocalizador = c.getTipoLocalizador();
    _builder.append(_tipoLocalizador);
    _builder.append("(\"");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append("\")).click();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence comandoVerifique(final /* VerifiquePresente */Object v) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved");
  }
  
  private CharSequence comandoNaoVerifique(final /* VerifiqueNaoPresente */Object v) {
    throw new Error("Unresolved compilation problems:"
      + "\nname cannot be resolved");
  }
  
  private CharSequence comandoNavegar(final Navegar n) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(\"");
    String _name = n.getName();
    _builder.append(_name);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence comandoEscrever(final Escrever e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.findElement(By.");
    String _tipoLocalizador = e.getTipoLocalizador();
    _builder.append(_tipoLocalizador);
    _builder.append("(\"");
    String _name = e.getName();
    _builder.append(_name);
    _builder.append("\")).sendKeys(\"");
    String _conteudo = e.getConteudo();
    _builder.append(_conteudo);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
