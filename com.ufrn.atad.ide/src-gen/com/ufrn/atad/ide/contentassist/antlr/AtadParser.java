/*
 * generated by Xtext 2.25.0
 */
package com.ufrn.atad.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.ufrn.atad.ide.contentassist.antlr.internal.InternalAtadParser;
import com.ufrn.atad.services.AtadGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AtadParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AtadGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AtadGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getComandoAccess().getAlternatives(), "rule__Comando__Alternatives");
			builder.put(grammarAccess.getComandosAcaoAccess().getAlternatives(), "rule__ComandosAcao__Alternatives");
			builder.put(grammarAccess.getEsperaAccess().getAlternatives(), "rule__Espera__Alternatives");
			builder.put(grammarAccess.getComandosValidadoresAccess().getAlternatives(), "rule__ComandosValidadores__Alternatives");
			builder.put(grammarAccess.getTipoLocalizadoresAccess().getAlternatives(), "rule__TipoLocalizadores__Alternatives");
			builder.put(grammarAccess.getClicarAccess().getGroup(), "rule__Clicar__Group__0");
			builder.put(grammarAccess.getNavegarAccess().getGroup(), "rule__Navegar__Group__0");
			builder.put(grammarAccess.getEscreverAccess().getGroup(), "rule__Escrever__Group__0");
			builder.put(grammarAccess.getEsperaPresenteAccess().getGroup(), "rule__EsperaPresente__Group__0");
			builder.put(grammarAccess.getEsperaVisivelAccess().getGroup(), "rule__EsperaVisivel__Group__0");
			builder.put(grammarAccess.getEsperaClicavelAccess().getGroup(), "rule__EsperaClicavel__Group__0");
			builder.put(grammarAccess.getVerifiquePresenteAccess().getGroup(), "rule__VerifiquePresente__Group__0");
			builder.put(grammarAccess.getVerifiqueNaoPresenteAccess().getGroup(), "rule__VerifiqueNaoPresente__Group__0");
			builder.put(grammarAccess.getAdicaoComandoAccess().getGroup(), "rule__AdicaoComando__Group__0");
			builder.put(grammarAccess.getQuandoAccess().getGroup(), "rule__Quando__Group__0");
			builder.put(grammarAccess.getDeclaraComandoAccess().getComandosAssignment(), "rule__DeclaraComando__ComandosAssignment");
			builder.put(grammarAccess.getClicarAccess().getTipoLocalizadorAssignment_2(), "rule__Clicar__TipoLocalizadorAssignment_2");
			builder.put(grammarAccess.getClicarAccess().getNameAssignment_3(), "rule__Clicar__NameAssignment_3");
			builder.put(grammarAccess.getNavegarAccess().getNameAssignment_1(), "rule__Navegar__NameAssignment_1");
			builder.put(grammarAccess.getEscreverAccess().getTipoLocalizadorAssignment_2(), "rule__Escrever__TipoLocalizadorAssignment_2");
			builder.put(grammarAccess.getEscreverAccess().getNameAssignment_3(), "rule__Escrever__NameAssignment_3");
			builder.put(grammarAccess.getEscreverAccess().getConteudoAssignment_4(), "rule__Escrever__ConteudoAssignment_4");
			builder.put(grammarAccess.getEsperaPresenteAccess().getTipoLocalizadorAssignment_1(), "rule__EsperaPresente__TipoLocalizadorAssignment_1");
			builder.put(grammarAccess.getEsperaPresenteAccess().getNameAssignment_2(), "rule__EsperaPresente__NameAssignment_2");
			builder.put(grammarAccess.getEsperaVisivelAccess().getTipoLocalizadorAssignment_1(), "rule__EsperaVisivel__TipoLocalizadorAssignment_1");
			builder.put(grammarAccess.getEsperaVisivelAccess().getNameAssignment_2(), "rule__EsperaVisivel__NameAssignment_2");
			builder.put(grammarAccess.getEsperaClicavelAccess().getTipoLocalizadorAssignment_1(), "rule__EsperaClicavel__TipoLocalizadorAssignment_1");
			builder.put(grammarAccess.getEsperaClicavelAccess().getNameAssignment_2(), "rule__EsperaClicavel__NameAssignment_2");
			builder.put(grammarAccess.getVerifiquePresenteAccess().getNameAssignment_4(), "rule__VerifiquePresente__NameAssignment_4");
			builder.put(grammarAccess.getVerifiqueNaoPresenteAccess().getNameAssignment_4(), "rule__VerifiqueNaoPresente__NameAssignment_4");
			builder.put(grammarAccess.getAdicaoComandoAccess().getComandoAssignment_1(), "rule__AdicaoComando__ComandoAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AtadGrammarAccess grammarAccess;

	@Override
	protected InternalAtadParser createParser() {
		InternalAtadParser result = new InternalAtadParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AtadGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AtadGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
