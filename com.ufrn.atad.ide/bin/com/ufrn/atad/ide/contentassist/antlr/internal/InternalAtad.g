/*
 * generated by Xtext 2.25.0
 */
grammar InternalAtad;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.ufrn.atad.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.ufrn.atad.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.ufrn.atad.services.AtadGrammarAccess;

}
@parser::members {
	private AtadGrammarAccess grammarAccess;

	public void setGrammarAccess(AtadGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDeclaraComando
entryRuleDeclaraComando
:
{ before(grammarAccess.getDeclaraComandoRule()); }
	 ruleDeclaraComando
{ after(grammarAccess.getDeclaraComandoRule()); } 
	 EOF 
;

// Rule DeclaraComando
ruleDeclaraComando 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaraComandoAccess().getComandosAssignment()); }
		(rule__DeclaraComando__ComandosAssignment)*
		{ after(grammarAccess.getDeclaraComandoAccess().getComandosAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComando
entryRuleComando
:
{ before(grammarAccess.getComandoRule()); }
	 ruleComando
{ after(grammarAccess.getComandoRule()); } 
	 EOF 
;

// Rule Comando
ruleComando 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComandoAccess().getAlternatives()); }
		(rule__Comando__Alternatives)
		{ after(grammarAccess.getComandoAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClicar
entryRuleClicar
:
{ before(grammarAccess.getClicarRule()); }
	 ruleClicar
{ after(grammarAccess.getClicarRule()); } 
	 EOF 
;

// Rule Clicar
ruleClicar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClicarAccess().getGroup()); }
		(rule__Clicar__Group__0)
		{ after(grammarAccess.getClicarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNavegar
entryRuleNavegar
:
{ before(grammarAccess.getNavegarRule()); }
	 ruleNavegar
{ after(grammarAccess.getNavegarRule()); } 
	 EOF 
;

// Rule Navegar
ruleNavegar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNavegarAccess().getGroup()); }
		(rule__Navegar__Group__0)
		{ after(grammarAccess.getNavegarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEscrever
entryRuleEscrever
:
{ before(grammarAccess.getEscreverRule()); }
	 ruleEscrever
{ after(grammarAccess.getEscreverRule()); } 
	 EOF 
;

// Rule Escrever
ruleEscrever 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEscreverAccess().getGroup()); }
		(rule__Escrever__Group__0)
		{ after(grammarAccess.getEscreverAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComandosAcao
entryRuleComandosAcao
:
{ before(grammarAccess.getComandosAcaoRule()); }
	 ruleComandosAcao
{ after(grammarAccess.getComandosAcaoRule()); } 
	 EOF 
;

// Rule ComandosAcao
ruleComandosAcao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComandosAcaoAccess().getComandoAssignment()); }
		(rule__ComandosAcao__ComandoAssignment)
		{ after(grammarAccess.getComandosAcaoAccess().getComandoAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerifique
entryRuleVerifique
:
{ before(grammarAccess.getVerifiqueRule()); }
	 ruleVerifique
{ after(grammarAccess.getVerifiqueRule()); } 
	 EOF 
;

// Rule Verifique
ruleVerifique 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerifiqueAccess().getGroup()); }
		(rule__Verifique__Group__0)
		{ after(grammarAccess.getVerifiqueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComandosValidadores
entryRuleComandosValidadores
:
{ before(grammarAccess.getComandosValidadoresRule()); }
	 ruleComandosValidadores
{ after(grammarAccess.getComandosValidadoresRule()); } 
	 EOF 
;

// Rule ComandosValidadores
ruleComandosValidadores 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComandosValidadoresAccess().getVerifiqueAssignment()); }
		(rule__ComandosValidadores__VerifiqueAssignment)
		{ after(grammarAccess.getComandosValidadoresAccess().getVerifiqueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdicaoComando
entryRuleAdicaoComando
:
{ before(grammarAccess.getAdicaoComandoRule()); }
	 ruleAdicaoComando
{ after(grammarAccess.getAdicaoComandoRule()); } 
	 EOF 
;

// Rule AdicaoComando
ruleAdicaoComando 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdicaoComandoAccess().getGroup()); }
		(rule__AdicaoComando__Group__0)
		{ after(grammarAccess.getAdicaoComandoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuando
entryRuleQuando
:
{ before(grammarAccess.getQuandoRule()); }
	 ruleQuando
{ after(grammarAccess.getQuandoRule()); } 
	 EOF 
;

// Rule Quando
ruleQuando 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuandoAccess().getGroup()); }
		(rule__Quando__Group__0)
		{ after(grammarAccess.getQuandoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comando__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComandoAccess().getComandosAcaoParserRuleCall_0()); }
		ruleComandosAcao
		{ after(grammarAccess.getComandoAccess().getComandosAcaoParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComandoAccess().getComandosValidadoresParserRuleCall_1()); }
		ruleComandosValidadores
		{ after(grammarAccess.getComandoAccess().getComandosValidadoresParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getComandoAccess().getAdicaoComandoParserRuleCall_2()); }
		ruleAdicaoComando
		{ after(grammarAccess.getComandoAccess().getAdicaoComandoParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getComandoAccess().getQuandoParserRuleCall_3()); }
		ruleQuando
		{ after(grammarAccess.getComandoAccess().getQuandoParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComandosAcao__ComandoAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComandosAcaoAccess().getComandoClicarParserRuleCall_0_0()); }
		ruleClicar
		{ after(grammarAccess.getComandosAcaoAccess().getComandoClicarParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComandosAcaoAccess().getComandoNavegarParserRuleCall_0_1()); }
		ruleNavegar
		{ after(grammarAccess.getComandosAcaoAccess().getComandoNavegarParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getComandosAcaoAccess().getComandoEscreverParserRuleCall_0_2()); }
		ruleEscrever
		{ after(grammarAccess.getComandosAcaoAccess().getComandoEscreverParserRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clicar__Group__0__Impl
	rule__Clicar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClicarAccess().getClicarKeyword_0()); }
	'clicar'
	{ after(grammarAccess.getClicarAccess().getClicarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clicar__Group__1__Impl
	rule__Clicar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClicarAccess().getEmKeyword_1()); }
	'em'
	{ after(grammarAccess.getClicarAccess().getEmKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clicar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClicarAccess().getNameAssignment_2()); }
	(rule__Clicar__NameAssignment_2)
	{ after(grammarAccess.getClicarAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Navegar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Navegar__Group__0__Impl
	rule__Navegar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Navegar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavegarAccess().getNavegarKeyword_0()); }
	'navegar'
	{ after(grammarAccess.getNavegarAccess().getNavegarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Navegar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Navegar__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Navegar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNavegarAccess().getNameAssignment_1()); }
	(rule__Navegar__NameAssignment_1)
	{ after(grammarAccess.getNavegarAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Escrever__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Escrever__Group__0__Impl
	rule__Escrever__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Escrever__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEscreverAccess().getEscreverKeyword_0()); }
	'escrever'
	{ after(grammarAccess.getEscreverAccess().getEscreverKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Escrever__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Escrever__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Escrever__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEscreverAccess().getNameAssignment_1()); }
	(rule__Escrever__NameAssignment_1)
	{ after(grammarAccess.getEscreverAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Verifique__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verifique__Group__0__Impl
	rule__Verifique__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verifique__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifiqueAccess().getVerifiqueKeyword_0()); }
	'Verifique'
	{ after(grammarAccess.getVerifiqueAccess().getVerifiqueKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verifique__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verifique__Group__1__Impl
	rule__Verifique__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Verifique__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifiqueAccess().getQueKeyword_1()); }
	'que'
	{ after(grammarAccess.getVerifiqueAccess().getQueKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verifique__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Verifique__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verifique__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerifiqueAccess().getNameAssignment_2()); }
	(rule__Verifique__NameAssignment_2)
	{ after(grammarAccess.getVerifiqueAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdicaoComando__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdicaoComando__Group__0__Impl
	rule__AdicaoComando__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdicaoComando__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdicaoComandoAccess().getEKeyword_0()); }
	'E'
	{ after(grammarAccess.getAdicaoComandoAccess().getEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdicaoComando__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdicaoComando__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdicaoComando__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdicaoComandoAccess().getComandoAssignment_1()); }
	(rule__AdicaoComando__ComandoAssignment_1)
	{ after(grammarAccess.getAdicaoComandoAccess().getComandoAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quando__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quando__Group__0__Impl
	rule__Quando__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quando__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuandoAccess().getQuandoKeyword_0()); }
	'Quando'
	{ after(grammarAccess.getQuandoAccess().getQuandoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quando__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quando__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quando__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuandoAccess().getComandosAcaoParserRuleCall_1()); }
	ruleComandosAcao
	{ after(grammarAccess.getQuandoAccess().getComandosAcaoParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaraComando__ComandosAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaraComandoAccess().getComandosComandoParserRuleCall_0()); }
		ruleComando
		{ after(grammarAccess.getDeclaraComandoAccess().getComandosComandoParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clicar__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClicarAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getClicarAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Navegar__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNavegarAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getNavegarAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Escrever__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEscreverAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getEscreverAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComandosAcao__ComandoAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComandosAcaoAccess().getComandoAlternatives_0()); }
		(rule__ComandosAcao__ComandoAlternatives_0)
		{ after(grammarAccess.getComandosAcaoAccess().getComandoAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Verifique__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerifiqueAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getVerifiqueAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComandosValidadores__VerifiqueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComandosValidadoresAccess().getVerifiqueVerifiqueParserRuleCall_0()); }
		ruleVerifique
		{ after(grammarAccess.getComandosValidadoresAccess().getVerifiqueVerifiqueParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdicaoComando__ComandoAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdicaoComandoAccess().getComandoComandosAcaoParserRuleCall_1_0()); }
		ruleComandosAcao
		{ after(grammarAccess.getAdicaoComandoAccess().getComandoComandosAcaoParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
